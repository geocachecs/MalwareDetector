#!/usr/bin/env python
# coding: utf-8

# In[ ]:

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn import svm
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import sys

# In[ ]:


Mal = pd.read_csv('MalwareData.csv')


# In[ ]:


Mal.head()


# In[ ]:


#Mal.info()


# In[ ]:


bins = (-0.5, 0.5, 1.5)
group_names = ['bad', 'good']
Mal['legitimate'] = pd.cut(Mal['legitimate'], bins = bins, labels = group_names)
Mal['legitimate'].unique()


# In[ ]:


label_InitialSize = LabelEncoder()


# In[ ]:


Mal['legitimate'] = label_InitialSize.fit_transform(Mal['legitimate'])


# In[ ]:


Mal['legitimate'].value_counts()


# In[ ]:


sns.countplot(Mal['legitimate'])


# In[ ]:


Mal = Mal.drop('Name', axis=1)
Mal = Mal.drop('md5', axis=1)
#Mal = Mal.drop('Machine', axis=1)
#Mal = Mal.drop('Characteristics', axis=1)
#Mal = Mal.drop('MajorLinkerVersion', axis=1)
#Mal = Mal.drop('MinorLinkerVersion', axis=1)
#Mal = Mal.drop('MajorOperatingSystemVersion', axis=1)
#Mal = Mal.drop('MinorOperatingSystemVersion', axis=1)
Mal = Mal.drop('MajorImageVersion', axis=1)
Mal = Mal.drop('MinorImageVersion', axis=1)
#Mal = Mal.drop('ImageBase', axis=1)
#Mal = Mal.drop('BaseOfData', axis=1)
#Mal = Mal.drop('FileAlignment', axis=1)
Mal = Mal.drop('MajorSubsystemVersion', axis=1)
Mal = Mal.drop('MinorSubsystemVersion', axis=1)
#Mal = Mal.drop('Subsystem', axis=1)
#Mal = Mal.drop('DllCharacteristics', axis=1)
#Mal = Mal.drop('CheckSum', axis=1)
Mal = Mal.drop('SectionsNb', axis=1)
Mal = Mal.drop('ImportsNbDLL', axis=1)
Mal = Mal.drop('ImportsNb', axis=1)
Mal = Mal.drop('ImportsNbOrdinal', axis=1)
Mal = Mal.drop('ExportNb', axis=1)
Mal = Mal.drop('ResourcesNb', axis=1)
#Mal = Mal.drop('SizeOfOptionalHeader', axis=1)
#Mal = Mal.drop('SizeOfCode', axis=1)
#Mal = Mal.drop('SizeOfInitializedData', axis=1)
#Mal = Mal.drop('SizeOfUninitializedData', axis=1)
#Mal = Mal.drop('AddressOfEntryPoint', axis=1)
#Mal = Mal.drop('BaseOfCode', axis=1)
#Mal = Mal.drop('SectionAlignment', axis=1)
#Mal = Mal.drop('SizeOfImage', axis=1)
#Mal = Mal.drop('SizeOfHeaders', axis=1)
#Mal = Mal.drop('SizeOfStackReserve', axis=1)
#Mal = Mal.drop('SizeOfStackCommit', axis=1)
#Mal = Mal.drop('SizeOfHeapReserve', axis=1)
#Mal = Mal.drop('SizeOfHeapCommit', axis=1)
#Mal = Mal.drop('LoaderFlags', axis=1)
#Mal = Mal.drop('NumberOfRvaAndSizes', axis=1)
Mal = Mal.drop('SectionsMeanEntropy', axis=1)
Mal = Mal.drop('SectionsMinEntropy', axis=1)
Mal = Mal.drop('SectionsMaxEntropy', axis=1)
Mal = Mal.drop('SectionsMeanRawsize', axis=1)
Mal = Mal.drop('SectionsMinRawsize', axis=1)
Mal = Mal.drop('SectionMaxRawsize', axis=1)
Mal = Mal.drop('SectionsMeanVirtualsize', axis=1)
Mal = Mal.drop('SectionsMinVirtualsize', axis=1)
Mal = Mal.drop('SectionMaxVirtualsize', axis=1)
Mal = Mal.drop('ResourcesMeanEntropy', axis=1)
Mal = Mal.drop('ResourcesMinEntropy', axis=1)
Mal = Mal.drop('ResourcesMaxEntropy', axis=1)
Mal = Mal.drop('ResourcesMeanSize', axis=1)
Mal = Mal.drop('ResourcesMinSize', axis=1)
Mal = Mal.drop('ResourcesMaxSize', axis=1)
Mal = Mal.drop('LoadConfigurationSize', axis=1)
Mal = Mal.drop('VersionInformationSize', axis=1)


# In[ ]:


X = Mal.drop('legitimate', axis = 1)
y = Mal['legitimate']


# In[ ]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)


# In[ ]:


len(X_train)


# In[ ]:


sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


# # Random Forest

# In[ ]:


rfc = RandomForestClassifier(n_estimators=500)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict(X_test)


# In[ ]:


#X_test[:20]


# In[ ]:


classification_report(y_test, pred_rfc)
confusion_matrix(y_test, pred_rfc)


# # Neural Network

# In[ ]:


mlpc = MLPClassifier(hidden_layer_sizes=(11,11,11), max_iter = 500)
mlpc.fit(X_train, y_train)
pred_mlpc = mlpc.predict(X_test)


# In[ ]:


classification_report(y_test, pred_mlpc)
confusion_matrix(y_test, pred_mlpc)


# In[ ]:


Mal.head()


# In[ ]:


XNewPre = [[332,224,258,9,0,361984,115712,0,6135,4096,372736,4194304,4096,512,0,0,1036288,1024,485887,16,1024,1048576,4096,1048576,4096,0,16
]]
ANewPre = [[332,224,3330,9,0,130560,19968,0,81778,4096,143360,771751936,4096,512,5,1,159744,1024,188943,2,33088,1048576,4096,1048576,4096,0,16
]]
DNewPre = [[332,224,33166,2,25,60928,55296,0,13848,4096,65536,4194304,4096,512,4,0,135168,1024,0,2,0,1048576,16384,1048576,4096,0,16
]]
XNewPre = sc.transform(XNewPre)
ANewPre = sc.transform(ANewPre)
DnewPre = sc.transform(DNewPre)
BNewPre = rfc.predict(XNewPre)
YNewPre = rfc.predict(ANewPre)
QNewPre = rfc.predict(DNewPre)
#YNewPre, BNewPre, QNewPre


# In[ ]:


NewMal = pd.read_csv(sys.argv[1])


# In[ ]:


NewMal.head() 


# In[ ]:

k=[]
for i in range(0, len(NewMal)):
    k.append([])
    k[i].append(NewMal.loc[i][0])
NewMal = NewMal.drop('Name', axis=1)
NewMal = NewMal.drop('md5', axis=1)
NewMal = NewMal.drop('Win32VersionValue', axis=1)
NewMal.head()


# In[ ]:

X = []
Y = []
for i in range(0, len(NewMal)):
    X.append([])
    for x in NewMal:
        X[i].append(NewMal.loc[i][x])
    X[i] = [X[i]]

    Y = sc.transform(X[i])
    DNewPre = rfc.predict(Y)
    if DNewPre == [0]:
        DNewPre = 'Malware'
    else:
        DNewPre = 'Benignware'
    print(k[i],'is' ,DNewPre)





