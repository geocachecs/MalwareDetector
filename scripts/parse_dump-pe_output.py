#!/usr/bin/python
import sys
import os



###########################################
######## parser(filename, columns) ########
###########################################
## parses the result of pe-parse ##########
## returning only values specified ########
## in "columns" (list of strings) #########
## returns as a comma delimited file ######
## appropriate for csv ####################
###########################################
###########################################
def parser(filename, columns, legit):
    try:
        file = open(filename, 'r')
    except:
        print("Could not open %s" % (filename))
        exit()

    #####################################
    ## Remove everything before the "."
    #####################################
    col_list = []
    for colname in columns:
        if(colname.find(".")>-1):
            col_list.append(colname.split(".")[1])
        else:
            col_list.append(colname)
    columns = col_list
    #####################################

    lines = file.readlines()	

    row = {}
    for colname in columns:
        row[colname] = -1
    
    
    
    for line in lines:
        splitline = line.split(":")
        name = splitline[0]
        data = ":".join(splitline[1:])
        #####################################
        ## Remove everything before the "."
        #####################################
        if(name.find(".")>-1):
            name = name.split(".")[1]
        #####################################
        if(name == "Imports"):
            break
        data = data.strip()
        if(len(data)>2 and data[:2]=="0x"):
            data = int(data, 16)      
        elif(data.isdigit()):
            data = int(data)
        
        if(row.has_key(name)):
            row[name] = data
 
    #for i in range(0, len(columns)-1):
    #    sys.stdout.write(columns[i] + ",");
    #sys.stdout.write(columns[len(columns)-1] + "\n");
    
    if(row.has_key("legitimate")):
        row["legitimate"]=legit

    for i in range(0, len(columns)-1):
        sys.stdout.write(str(row[columns[i]]) + ",");
    sys.stdout.write(str(row[columns[len(columns)-1]]) + "\n");


################################################################################################################        

##########################################
#### create_csv ##########################
##########################################
##########################################
##########################################
##########################################
def create_csv(directory, columns, legit):
    
    #####################################
    ## Remove everything before the "."
    #####################################
    col_list = []
    for colname in columns:
        if(colname.find(".")>-1):
            col_list.append(colname.split(".")[1])
        else:
            col_list.append(colname)
    columns = col_list
    #####################################
    
    # print columns
    for i in range(0, len(columns)-1):
        sys.stdout.write(columns[i] + ",");
    sys.stdout.write(columns[len(columns)-1] + "\n");

    filenames = []
    for name in os.listdir(directory):
        if( os.path.isfile(directory + "/" + name)):
            filenames.append(directory + "/" + name)

    for f in filenames:
        parser(f, columns, legit)



################################################################################################################


columns = ['Name' ,'md5', 'FileHeader.Machine', 'FileHeader.SizeOfOptionalHeader', 'FileHeader.Characteristics', 'OptionalHeader64.MajorLinkerVersion', 'OptionalHeader64.MinorLinkerVersion', 'OptionalHeader64.SizeOfCode', 'OptionalHeader64.SizeOfInitializedData', 'OptionalHeader64.SizeOfUninitializedData', 'OptionalHeader64.AddressOfEntryPoint', 'OptionalHeader64.BaseOfCode', 'OptionalHeader64.BaseOfData', 'OptionalHeader64.ImageBase', 'OptionalHeader64.SectionAlignment', 'OptionalHeader64.FileAlignment', 'OptionalHeader64.MajorOperatingSystemVersion', 'OptionalHeader64.MinorOperatingSystemVersion', 'OptionalHeader64.SizeOfImage', 'OptionalHeader64.SizeOfHeaders', 'OptionalHeader64.CheckSum', 'OptionalHeader64.Subsystem','OptionalHeader64.Win32VersionValue', 'OptionalHeader64.DllCharacteristics', 'OptionalHeader64.SizeOfStackReserve', 'OptionalHeader64.SizeOfStackCommit', 'OptionalHeader64.SizeOfHeapReserve', 'OptionalHeader64.SizeOfHeapCommit', 'OptionalHeader64.LoaderFlags', 'OptionalHeader64.NumberOfRvaAndSizes', 'legitimate']  


def usage(argv):
    print("Usage: ./{} <directory> <1 for legit, 0 for malware>".format(argv[0]))
    exit(0)

def main(argv, columns):
    if(len(argv)!=3):
        usage(argv)
    directory = argv[1]
    legit=argv[2]
    create_csv(directory, columns, legit)
    

main(sys.argv, columns)
    

